import * as React from "react";
export declare type PendingProps = {
    children: React.ReactNode | React.ReactNode[] | (() => null | JSX.Element);
};
export declare type RejectedProps<E = Error> = {
    children: React.ReactNode | React.ReactNode[] | ((reason: E) => null | JSX.Element);
};
export declare type ResolvedProps<T = any> = {
    children: React.ReactNode | React.ReactNode[] | ((result: T) => null | JSX.Element);
};
export declare type ThenProps<T = any, E = Error> = {
    children: (state: PromiseState, result?: T, reason?: E) => null | JSX.Element;
};
export declare type AwaitProps<T = any> = {
    children?: React.ReactNode | React.ReactNode[];
    promise?: Promise<T>;
};
export declare type AwaitContext<T = any, E = Error> = {
    state: PromiseState;
    result?: T;
    reason?: E;
};
export declare type AwaitState = AwaitContext;
export declare enum PromiseState {
    Pending = "pending",
    Resolved = "resolved",
    Rejected = "rejected"
}
export declare function Pending({ children }: PendingProps): JSX.Element;
export declare function Resolved({ children }: ResolvedProps): JSX.Element;
export declare function Rejected({ children }: RejectedProps): JSX.Element;
export declare function Then({ children }: ThenProps): JSX.Element;
export declare class Await extends React.PureComponent<AwaitProps, AwaitState> {
    state: AwaitState;
    componentDidMount(): void;
    componentDidUpdate(prevProps: AwaitProps): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
    private bindPromise;
}
