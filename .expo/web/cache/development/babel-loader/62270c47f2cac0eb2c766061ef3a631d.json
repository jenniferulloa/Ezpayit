{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\srija\\\\Ezpayit\\\\node_modules\\\\react-native-virtual-keyboard\\\\src\\\\VirtualKeyboard.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { ViewPropTypes } from \"react-native-web/dist/index\";\nimport styles from \"./VirtualKeyboard.style\";\n\nvar VirtualKeyboard = function (_Component) {\n  _inherits(VirtualKeyboard, _Component);\n\n  var _super = _createSuper(VirtualKeyboard);\n\n  function VirtualKeyboard(props) {\n    var _this;\n\n    _classCallCheck(this, VirtualKeyboard);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      text: ''\n    };\n    return _this;\n  }\n\n  _createClass(VirtualKeyboard, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: [styles.container, this.props.style],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 4\n        }\n      }, this.Row([1, 2, 3]), this.Row([4, 5, 6]), this.Row([7, 8, 9]), React.createElement(View, {\n        style: [styles.row, this.props.rowStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 5\n        }\n      }, this.props.decimal ? this.Cell('.') : React.createElement(View, {\n        style: {\n          flex: 1\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 45\n        }\n      }), this.Cell(0), this.Backspace()));\n    }\n  }, {\n    key: \"Backspace\",\n    value: function Backspace() {\n      var _this2 = this;\n\n      return React.createElement(TouchableOpacity, {\n        accessibilityLabel: \"backspace\",\n        style: styles.backspace,\n        onPress: function onPress() {\n          _this2.onPress('back');\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 4\n        }\n      }, React.createElement(Image, {\n        source: this.props.backspaceImg,\n        resizeMode: \"contain\",\n        style: this.props.applyBackspaceTint && {\n          tintColor: this.props.color\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 5\n        }\n      }));\n    }\n  }, {\n    key: \"Row\",\n    value: function Row(numbersArray) {\n      var _this3 = this;\n\n      var cells = numbersArray.map(function (val) {\n        return _this3.Cell(val);\n      });\n      return React.createElement(View, {\n        style: [styles.row, this.props.rowStyle],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 4\n        }\n      }, cells);\n    }\n  }, {\n    key: \"Cell\",\n    value: function Cell(symbol) {\n      var _this4 = this;\n\n      return React.createElement(TouchableOpacity, {\n        style: [styles.cell, this.props.cellStyle],\n        key: symbol,\n        accessibilityLabel: symbol.toString(),\n        onPress: function onPress() {\n          _this4.onPress(symbol.toString());\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 4\n        }\n      }, React.createElement(Text, {\n        style: [styles.number, {\n          color: this.props.color\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 5\n        }\n      }, symbol));\n    }\n  }, {\n    key: \"onPress\",\n    value: function onPress(val) {\n      if (this.props.pressMode === 'string') {\n        var curText = this.state.text;\n\n        if (isNaN(val)) {\n          if (val === 'back') {\n            curText = curText.slice(0, -1);\n          } else {\n            curText += val;\n          }\n        } else {\n          curText += val;\n        }\n\n        this.setState({\n          text: curText\n        });\n        this.props.onPress(curText);\n      } else {\n          this.props.onPress(val);\n        }\n    }\n  }]);\n\n  return VirtualKeyboard;\n}(Component);\n\nVirtualKeyboard.propTypes = {\n  pressMode: PropTypes.oneOf(['string', 'char']),\n  color: PropTypes.string,\n  onPress: PropTypes.func.isRequired,\n  backspaceImg: PropTypes.number,\n  applyBackspaceTint: PropTypes.bool,\n  decimal: PropTypes.bool,\n  rowStyle: ViewPropTypes.style,\n  cellStyle: ViewPropTypes.style\n};\nVirtualKeyboard.defaultProps = {\n  pressMode: 'string',\n  color: 'gray',\n  backspaceImg: require(\"./backspace.png\"),\n  applyBackspaceTint: true,\n  decimal: false\n};\nmodule.exports = VirtualKeyboard;","map":{"version":3,"sources":["C:/Users/srija/Ezpayit/node_modules/react-native-virtual-keyboard/src/VirtualKeyboard.js"],"names":["React","Component","PropTypes","ViewPropTypes","styles","VirtualKeyboard","props","state","text","container","style","Row","row","rowStyle","decimal","Cell","flex","Backspace","backspace","onPress","backspaceImg","applyBackspaceTint","tintColor","color","numbersArray","cells","map","val","symbol","cell","cellStyle","toString","number","pressMode","curText","isNaN","slice","setState","propTypes","oneOf","string","func","isRequired","bool","defaultProps","require","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport {\n\tText,\n\tView,\n\tTouchableOpacity,\n\tImage,\n\tViewPropTypes\n} from 'react-native';\n\nimport styles from './VirtualKeyboard.style';\n\nclass VirtualKeyboard extends Component {\n\n\tstatic propTypes = {\n\t\tpressMode: PropTypes.oneOf(['string', 'char']),\n\t\tcolor: PropTypes.string,\n\t\tonPress: PropTypes.func.isRequired,\n\t\tbackspaceImg: PropTypes.number,\n\t\tapplyBackspaceTint: PropTypes.bool,\n\t\tdecimal: PropTypes.bool,\n\t\trowStyle: ViewPropTypes.style,\n\t\tcellStyle: ViewPropTypes.style\n\t}\n\n\tstatic defaultProps = {\n\t\tpressMode: 'string',\n\t\tcolor: 'gray',\n\t\tbackspaceImg: require('./backspace.png'),\n\t\tapplyBackspaceTint: true,\n\t\tdecimal: false,\n\t}\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\ttext: '',\n\t\t};\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<View style={[styles.container, this.props.style]}>\n\t\t\t\t{this.Row([1, 2, 3])}\n\t\t\t\t{this.Row([4, 5, 6])}\n\t\t\t\t{this.Row([7, 8, 9])}\n\t\t\t\t<View style={[styles.row, this.props.rowStyle]}>\n\t\t\t\t\t{this.props.decimal ? this.Cell('.') : <View style={{ flex: 1 }} /> }\n\t\t\t\t\t{this.Cell(0)}\n\t\t\t\t\t{this.Backspace()}\n\t\t\t\t</View>\n\t\t\t</View>\n\t\t);\n\t}\n\n\tBackspace() {\n\t\treturn (\n\t\t\t<TouchableOpacity accessibilityLabel='backspace' style={styles.backspace} onPress={() => { this.onPress('back') }}>\n\t\t\t\t<Image source={this.props.backspaceImg} resizeMode='contain' style={this.props.applyBackspaceTint && ({ tintColor: this.props.color })} />\n\t\t\t</TouchableOpacity>\n\t\t);\n\t}\n\n\tRow(numbersArray) {\n\t\tlet cells = numbersArray.map((val) => this.Cell(val));\n\t\treturn (\n\t\t\t<View style={[styles.row, this.props.rowStyle]}>\n\t\t\t\t{cells}\n\t\t\t</View>\n\t\t);\n\t}\n\n\tCell(symbol) {\n\t\treturn (\n\t\t\t<TouchableOpacity style={[styles.cell, this.props.cellStyle]} key={symbol} accessibilityLabel={symbol.toString()} onPress={() => { this.onPress(symbol.toString()) }}>\n\t\t\t\t<Text style={[styles.number, { color: this.props.color }]}>{symbol}</Text>\n\t\t\t</TouchableOpacity>\n\t\t);\n\t}\n\n\tonPress(val) {\n\t\tif (this.props.pressMode === 'string') {\n\t\t\tlet curText = this.state.text;\n\t\t\tif (isNaN(val)) {\n\t\t\t\tif (val === 'back') {\n\t\t\t\t\tcurText = curText.slice(0, -1);\n\t\t\t\t} else {\n\t\t\t\t\tcurText += val;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcurText += val;\n\t\t\t}\n\t\t\tthis.setState({ text: curText });\n\t\t\tthis.props.onPress(curText);\n\t\t} else /* if (props.pressMode == 'char')*/ {\n\t\t\tthis.props.onPress(val);\n\t\t}\n\t}\n}\n\n\nmodule.exports = VirtualKeyboard;\n"]},"metadata":{},"sourceType":"module"}